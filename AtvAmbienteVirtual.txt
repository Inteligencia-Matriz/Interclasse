python -m venv <nome> -> python -m venv v1
<pasta>\Scripts\active -> v1\Scripts\activate 

instalar bibliotecas do arquivo [ req ] -> pip install -r requirements.txt

ativar o ambiente virtual se não estiver ativado -> <pasta>\Scripts\active -> v1\Scripts\activate

Guardar bibliotecas instaladas -> [ pip freeze > requirements.txt ]

Ativar o código -> streamlit run main.py

rodar o streamlit -> streamlit run <nome arquivo> ou python -m streamlit run <arquivo>
    streamlit run tst2.py

pode ser preciso mudar a prota de acesso, se a porta padrão 8501 ja estiver em uso por outra 
aplicação -> python -m streamlit run <arquivo>.py --server.port <numero da porta (8502, 8503, ...)>
    > ex: python -m streamlit run inter.py --server.port 8502
    python -m streamlit run AtivarAQUI.py --server.port 8504
    
    python -m streamlit run utils/Realizar_cadastros.py --server.port 8504

Verificarq quem esta usando a porta de entrada: netstat -ano | findstr :<porta entrada>
    > ex: netstat -ano | findstr :8504

Encerrar uma aplicação que esta usando determinada porta: taskkill /PID <numero PID (5 coluna)> /F
    > taskkill /PID 11236 /F

--------------------------------------
Fazendo push direto do Git -> git push -u origin main

Verificando se os caminhos do Git estão certos para o push no Github -> git remote -v

Verificando o status do repositório local -> git status

escolher um arquivo específico para dar push -> git add <nome arquivo>

adicionar uma descrição de commit -> git commit -m "<descrição>"

dar push para o github -> git push

---------------------------------------
Pegar credencial no Console Google Cloud 
Selecionar o projeto -> APIs e Serviços -> Credenciais -> clicar no nome azul do email -> la em cima, aba [chaves] -> 
Adicionar chave -> Criar nova chave -> JSON

---------------------------------------
adicionando credencial no github
1. dentro do arquivo [.gitignore], adicionar [# Ignorar arquivos de segredos e credenciais]
2. incluir o nome dos arquivos credenciais dentro do arquivo [.gitignore]
3. garantir que o arquivo credencial não vá para o github: git rm --cached <nome arquivo credencial>
> git rm --cached cred.json

4. no terminal:

# Adiciona as mudanças no arquivo .gitignore para a "área de preparação"
git add .gitignore

# Cria o commit com uma mensagem clara sobre o que foi feito
git commit -m "Adiciona minhas-credenciais.json ao gitignore"

# Envia a mudança para o seu repositório no GitHub
git push

------------------------------------
Arquivo TOML para o Streamlit:
> usar 3 aspas no inicio e no final de [private.key]
> substituir [:] por [ = ]
> retirar as aspas das variáveis

EX:
# .streamlit/secrets.toml

[gcp_service_account]
type = "service_account"
project_id = "<SEU_PROJECT_ID>"
private_key_id = "<SEU_PRIVATE_KEY_ID>"
client_email = "<SEU_CLIENT_EMAIL>"
client_id = "<SEU_CLIENT_ID>"

private_key = """-----BEGIN PRIVATE KEY-----
COLE_SUA_CHAVE_PRIVADA_COMPLETA_AQUI
-----END PRIVATE KEY-----"""

------------------------------------
Adicionando as credenciais GitHub Secrets
entrar no repositorio -> settings (configurações) -> barra lateral, [Secrets and variables] -> Actions -> New repository secret ->
> Name: de nome ao secrets usando letras maiusculas (ex: GCP_CREDENTIALS)
> Value (ou Secret): adicionar o conteudo completo do seu arquivo com as credenciais